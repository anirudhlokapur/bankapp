 package com.capgemini.test;
 
2  
 
3  import static org.junit.Assert.*;
 
4  import static org.mockito.Mockito.when;
 
5  
 
6  import org.junit.Before;
 
7  import org.junit.Test;
 
8  import org.mockito.Mock;
 
9  import org.mockito.MockitoAnnotations;
 
10  
 
11  import com.capgemini.beans.Account;
 
12  import com.capgemini.exception.InsufficientBalanceException;
 
13  import com.capgemini.exception.InsufficientOpeningBalanceException;
 
14  import com.capgemini.exception.InvalidAccountNumberException;
 
15  import com.capgemini.repository.AccountRepository;
 
16  import com.capgemini.service.AccountService;
 
17  import com.capgemini.service.AccountServiceImp1;
 
18  
 
19  public class AccountTest {
 
20  	
 
21  	AccountService accountService;
 
22  	
 
23  	@Mock
 
24  	AccountRepository accountRepository;
 
25  	
 
26  
 
27  	@Before
 
28  	public void setUp() throws Exception {
 
29  		MockitoAnnotations.initMocks(this);
 
30  		
 
31  		accountService = new AccountServiceImp1(accountRepository);
 
32  	}
 
33  
 
34  	
 
35  	
 
36  	@Test(expected=com.capgemini.exception.InsufficientOpeningBalanceException.class)
 
37  	public void WhenTheAmountIsLessThan500SystemShouldThrowException() throws InsufficientOpeningBalanceException
 
38  	{
 
39  		accountService.createAccount(101, 400);
 
40  	}
 
41  	
 
42  	@Test
 
43  	public void whenTheValidInfoIsPassedAccountShouldBeCreatedSuccessfully() throws InsufficientOpeningBalanceException
 
44  	{
 
45  		Account account = new Account();
 
46  		account.setAccountNumber(101);
 
47  		account.setAmount(5000);
 
48  		when(accountRepository.save(account)).thenReturn(true);
 
49  		assertEquals(account,accountService.createAccount(101,5000));
 
50  			
 
51  	}
 
52  	
 
53  	
 
54  	@Test(expected=com.capgemini.exception.InvalidAccountNumberException.class)
 
55  	  public void whenTheAccountIsInvalid() throws InvalidAccountNumberException, InsufficientBalanceException
 
56  	    { 
 
57  	        accountService.depositAmount(105, 400); 
 
58  	    } 
 
59  	    
 
60  	 
 
61  	        
 
62  
 
63  
 
64  
 
65  	    @Test 
 
66  	    public void whenTheValidInfoIsPassedAmountMustBeDepositedSuccessfully() throws InvalidAccountNumberException, InsufficientBalanceException 
 
67  	    { 
 
68  	        Account account = new Account();
 
69  	        account.setAccountNumber(102); 
 
70  	        account.setAmount(5000); 
 
71  	        when(accountRepository.searchAccount(account.getAccountNumber())).thenReturn(account);
 
72  	        assertEquals(5500, accountService.depositAmount(102, 500)); 
 
73  	    } 
 
74  	    
 
75  
 
76  	                               /*Withdraw amount
 
77  	                               1. Invalid Account Number Exception
 
78  	                               2. InsufficientBalance Exception
 
79  	                               3. successful withdraw
 
80  	                              */
 
81  	    @Test 
 
82  	    public void whenTheValidInfoIsPassedAmountMustBeWithDrawnSuccessfully() throws InvalidAccountNumberException,InsufficientBalanceException 
 
83  	    { 
 
84  	        Account account = new Account();
 
85  	        
 
86  	        account.setAccountNumber(101); 
 
87  	        account.setAmount(5000); 
 
88  	        
 
89  	        
 
90  
 
91  	    
 
92  	        
 
93  	        
 
94  	        
 
95  	        when(accountRepository.searchAccount(account.getAccountNumber())).thenReturn(account);
 
96  	        assertEquals(4500, accountService.withdrawAmount(101, 500)); 
 
97  	    } 
 
98  	    
 
99  	    
 
100  	    
 
101  
 
102  	@Test(expected=com.capgemini.exception.InsufficientBalanceException.class)
 
103  	  public void whenTheBalanceisInsufficient() throws InvalidAccountNumberException, InsufficientBalanceException
 
104  	    { 
 
105  
 
106  	    Account account = new Account();
 
107  	    
 
108  	    account.setAccountNumber(101); 
 
109  	    account.setAmount(5000); 
 
110  	    when(accountRepository.searchAccount(account.getAccountNumber())).thenReturn(account);
 
111  	    assertEquals(4500, accountService.withdrawAmount(101, 6000)); 
 
112  	    
 
113  	    
 
114  	    
 
115  	    
 
116  	    
 
117  	        
 
118  	    } 
 
119  
 
120  	@Test(expected=com.capgemini.exception.InvalidAccountNumberException.class)
 
121  	  public void whenTheAccountIsInvalidNumber() throws InvalidAccountNumberException, InsufficientBalanceException
 
122  	    { 
 
123  	        accountService.withdrawAmount(105, 400); 
 
124  	    }
 
125  	
 
126  	
 
127  } 
